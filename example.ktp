-- eval is aborted, when bottom is called, but here's a forever-looping def
bottom : N -> N
bottom = M(C(S,I[1,2]))

id   = I[1,1]
plus = P(id, C(S, I[2,3]))

c1 = C(S,Z)
c2 = C(S,c1)

pred = C(P(Z, I[1,3]), id, Z)
predP = C(pred, C(if0P, id, id))

max = C(plus, C(mult, C(gt0, C(minus, I[1,2], I[2,2])), I[1,2]),
              C(mult, C(gt0, C(minus, I[2,2], I[1,2])), I[2,2]))

minus = C(P(id, C(pred, I[2,3])), I[2,2], I[1,2])
diff = C(plus, C(minus, I[1,2], I[2,2]), C(minus, I[2,2], I[1,2]))

minusP = C(P(id, C(predP, I[2,3])), I[2,2], I[1,2])

or = plus
and = mult

eq0 = not
gt0 = C(P(Z, I[3,3]), id, c1)
gt = C(gt0, minus)
lt = C(C(gt0, minus), I[2,2], I[1,2])
lte = C(not, gt)

-- Clearer but less efficient definition: not = C(minus, c1, id)
not = C(P(C(S, I[1,1]), C(Z, I[1,3])), I[1,1], I[1,1])
sgn = C(P(Z, C(S, I[3,3])), I[1,1], Z)

if0P = P(bottom, I[3,3])

rem = P(Z, C(mult, C(sgn, I[3,3]), C(mult, C(S, I[2,3]), C(sgn, C(diff, C(S, I[2,3]), I[3,3])))))
quot = P(Z, C(mult, C(sgn, I[3,3]), C(plus, I[2,3], C(not, C(diff, C(S, C(rem, I[1,3], I[3,3])), I[3,3])))))

mult = P(Z, C(plus, I[2,3], I[3,3])) 

divMult = C(mult, I[1,3], I[3,3])
div = M(C(not, C(and, C(lte, divMult, I[2,3]), C(lt, I[2,3], C(plus, divMult, I[3,3])))))

divP = M(C(minusP, I[2,3], C(mult, I[1,3], I[3,3])))
divP2 = M(C(diff, I[2,3], C(mult, I[1,3], I[3,3])))

fac : N x N -> N
fac = C(P(c1, C(mult, I[2,3], C(S, I[1,3]))), id, Z)
